{"version":3,"sources":["components/Form.js","components/Todo.js","components/Todolist.js","App.js","reportWebVitals.js","index.js"],"names":["Form","inputText","setInputText","todos","setTodos","setStatus","value","type","onChange","e","target","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","Todolist","filteredTodos","console","log","App","useState","status","setFilteredTodos","useEffect","filterHandler","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83db1597.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Form = ({ inputText, setInputText, todos, setTodos, setStatus }) => {\n  // Write your JavaScript functions here\n\n  const inputTextHandler = e => {\n    // console.log(e.target.value);\n    setInputText(e.target.value);\n  };\n\n  const submitTodoHandler = e => {\n    e.preventDefault();\n    setTodos([\n      ...todos,\n      { text: inputText, completed: false, id: Math.random() * 1000 }\n    ]); //existing items in array\n    setInputText(\"\");\n  };\n\n  // Function to change state of filter to Completed / Uncompleted\n  const statusHandler = e => {\n    // console.log(e.target.value);\n    setStatus(e.target.value);\n  };\n\n  return (\n    <form>\n      <input\n        value={inputText} //this resets input textbox on submit\n        type=\"text\"\n        onChange={inputTextHandler}\n        className=\"todo-input\"\n      />\n      <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\n        <i className=\"fas fa-plus-square\"></i>\n      </button>\n      <div className=\"select\">\n        <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\n          <option value=\"all\">All</option>\n          <option value=\"completed\">Completed</option>\n          <option value=\"uncompleted\">Uncompleted</option>\n        </select>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\n\nconst Todo = ({ text, todo, todos, setTodos }) => {\n  // events\n  const deleteHandler = () => {\n    setTodos(todos.filter(item => item.id !== todo.id));\n  };\n\n  const completeHandler = () => {\n    setTodos(\n      todos.map(item => {\n        if (item.id === todo.id) {\n          return {\n            ...item,\n            completed: !item.completed\n          };\n        }\n        return item;\n      })\n    );\n  };\n\n  return (\n    <div className=\"todo\">\n      <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>\n        {text}\n      </li>\n      <button onClick={completeHandler} className=\"complete-btn\">\n        <i className=\"fas fa-check\"></i>\n      </button>\n      <button onClick={deleteHandler} className=\"trash-btn\">\n        <i className=\"fas fa-trash\"></i>\n      </button>\n    </div>\n  );\n};\n\nexport default Todo;\n","import React from \"react\";\n// Import Components\nimport Todo from \"./Todo\";\n\nconst Todolist = ({ todos, setTodos, filteredTodos }) => {\n  console.log(todos);\n  return (\n    <div className=\"todo-container\">\n      <ul className=\"todo-list\">\n        {filteredTodos.map(todo => (\n          <Todo\n            todos={todos}\n            todo={todo}\n            setTodos={setTodos}\n            key={todo.id}\n            text={todo.text}\n            // id={todo.id}\n          />\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Todolist;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Form from \"./components/Form\";\nimport Todolist from \"./components/Todolist\";\n\nfunction App() {\n  // state to react to user input and state for todo's\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]); //array of objects\n  // below state used to filter between complete and uncomplete status\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  // if you want to use state in other components, pass it down from the parent component - one way data flow\n  // let's use useEffect to run a function everytime a piece of state changes\n\n  // USE EFFECT\n  useEffect(() => {\n    // console.log(\"hey\"); //running a function as first argument\n    filterHandler();\n  }, [todos, status]); //empty array makes the function run only once when component is first rendered. If you want to run function many times, add an argument\n\n  // Functions\n  const filterHandler = () => {\n    switch (\n      status //status is from completed/ uncompleted filter\n    ) {\n      case \"completed\":\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case \"uncompleted\":\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Russell's Todo List</h1>\n      </header>\n      <Form\n        inputText={inputText}\n        setInputText={setInputText}\n        todos={todos}\n        setTodos={setTodos}\n        setStatus={setStatus}\n      />\n      <Todolist\n        todos={todos}\n        setTodos={setTodos}\n        filteredTodos={filteredTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}